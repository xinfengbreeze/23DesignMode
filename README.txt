设计模式理解总结

创建型设计模式
简单工厂（静态工厂）：一个静态方法获取
工厂方法：工厂是一个接口要实现不同的工厂
抽象工厂：工厂接口包含不止一个接口方法，有了产品族的概念
建造者设计模式：添加不同的内容实现创建出多样的对象
单利设计模式：实现方法有懒汉式、饿汉式、枚举类型实现
原型设计模式：利用Java的clone方法有浅拷贝和深拷贝


结构型设计模式：
适配器模式：用来解决模块与模块之间的接口不匹配的问题，用适配器进行转化。
外观模式：将模块复杂的内容封装起来，只对外暴露简单的接口。
桥接模式：当一个类如果有两个维度的变化，如果使用继承的方法进行，那么会使类以平方的形式增长，采用组合的方式将更加灵活
组合模式：可以用来处理数据结构的数据，在任何一个节点都可以获得父节点或者下包含的字节点。
装饰者模式：对被装饰者的功能增强。1、实现同一个接口 2、持有被装饰者的类 3、内部调用被装饰者类的方法并加以增强
代理设计模式：有静态代理、动态代理（Java的proxy实现，cglib）
享元设计模式：

行为型设计模式
策略设计模式：例如排序 采用不同的测量就可以实现不同的排序，comparator就是一个策略接口。
状态设计模式：用于状态的切换，一个状态的持有他前一个或者后一个状态
命令设计模式：通过命令来切换，例如电视机 命令 和遥控器    遥控器只有电视对象并向他发送不同的命令，电视机含有对命令的解析
责任链设计模式：一级一级调用的模式，例如汽车销售  🔌店员的权限是打几折，经理的权限是打几折，老板的权限是打几折这样一级一级的释放
观察者设计模式：常用的回调函数
访问者设计模式：不同的类只接受不同的访问者
中介者设计模式：MVP思想、中介者持有一个类的接口引用，然后用它来进行和其他类进行交互。
模板设计模式：用的很多 包含 基本方法、抽象方法 和 钩子函数
备忘录设计模式：典型的就是 canvas的 save和restore的方法
解释器设计模式：正则表达式